$version Generated by VerilatedVcd $end
$date Wed Jun  8 11:31:50 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire 64 &! RamReadAddr [63:0] $end
  $var wire 64 "! RamReadData [63:0] $end
  $var wire  1 $! RamReadEnable $end
  $var wire 64 (! RamWriteAddr [63:0] $end
  $var wire 64 ,! RamWriteData [63:0] $end
  $var wire  1 %! RamWriteEnable $end
  $var wire 64 *! RamWriteMask [63:0] $end
  $var wire  1 ~ clk $end
  $var wire  1 !! rst $end
  $scope module zerocore $end
   $var wire 64 &! RamReadAddr [63:0] $end
   $var wire 64 "! RamReadData [63:0] $end
   $var wire  1 $! RamReadEnable $end
   $var wire 64 (! RamWriteAddr [63:0] $end
   $var wire 64 ,! RamWriteData [63:0] $end
   $var wire  1 %! RamWriteEnable $end
   $var wire 64 *! RamWriteMask [63:0] $end
   $var wire  1 5! aluBsrc $end
   $var wire  4 ) aluCtl [3:0] $end
   $var wire  1 ~ clk $end
   $var wire 64 - imm [63:0] $end
   $var wire 64 1! ina [63:0] $end
   $var wire 64 - inb [63:0] $end
   $var wire 32 & instD [31:0] $end
   $var wire 32 / instE [31:0] $end
   $var wire 32 .! instF [31:0] $end
   $var wire 32 2 instM [31:0] $end
   $var wire 32 5 instW [31:0] $end
   $var wire 64 ' pcD [63:0] $end
   $var wire 64 0 pcE [63:0] $end
   $var wire 64 $ pcF [63:0] $end
   $var wire 64 3 pcM [63:0] $end
   $var wire 64 6 pcW [63:0] $end
   $var wire 64 6! ra [63:0] $end
   $var wire  5 * ra_addr [4:0] $end
   $var wire  1 5! ra_en $end
   $var wire 64 /! rb [63:0] $end
   $var wire  5 + rb_addr [4:0] $end
   $var wire  1 5! rb_en $end
   $var wire  5 , rd_addr [4:0] $end
   $var wire  1 5! rd_en $end
   $var wire 64 3! res [63:0] $end
   $var wire  1 !! rst $end
   $var wire 64 8! rw [63:0] $end
   $scope module u_ex $end
    $var wire  4 ) aluCtl [3:0] $end
    $var wire 64 1! ina [63:0] $end
    $var wire 64 - inb [63:0] $end
    $var wire 64 3! res [63:0] $end
   $upscope $end
   $scope module u_id $end
    $var wire  1 < ADDI $end
    $var wire  1 5! aluBsrc $end
    $var wire  4 ) aluCtl [3:0] $end
    $var wire  8 = aluType [7:0] $end
    $var wire  3 9 funt3 [2:0] $end
    $var wire  1 ; funt3_000 $end
    $var wire 64 - imm [63:0] $end
    $var wire 32 & inst [31:0] $end
    $var wire  7 8 opcode [6:0] $end
    $var wire  1 : opcode_001_0011 $end
    $var wire  5 * ra_addr [4:0] $end
    $var wire  1 5! ra_en $end
    $var wire  5 + rb_addr [4:0] $end
    $var wire  1 5! rb_en $end
    $var wire  5 , rd_addr [4:0] $end
    $var wire  1 5! rd_en $end
   $upscope $end
   $scope module u_if $end
    $var wire  1 ~ clk $end
    $var wire 64 $ pc [63:0] $end
    $var wire  1 !! rst $end
   $upscope $end
   $scope module u_inst_D2E $end
    $var wire 32 :! WIDTH [31:0] $end
    $var wire  1 ~ clk $end
    $var wire 32 .! din [31:0] $end
    $var wire 32 / dout [31:0] $end
    $var wire  1 !! rst $end
    $var wire  1 5! wen $end
   $upscope $end
   $scope module u_inst_E2M $end
    $var wire 32 :! WIDTH [31:0] $end
    $var wire  1 ~ clk $end
    $var wire 32 / din [31:0] $end
    $var wire 32 2 dout [31:0] $end
    $var wire  1 !! rst $end
    $var wire  1 5! wen $end
   $upscope $end
   $scope module u_inst_F2D $end
    $var wire 32 :! WIDTH [31:0] $end
    $var wire  1 ~ clk $end
    $var wire 32 .! din [31:0] $end
    $var wire 32 & dout [31:0] $end
    $var wire  1 !! rst $end
    $var wire  1 5! wen $end
   $upscope $end
   $scope module u_inst_M2W $end
    $var wire 32 :! WIDTH [31:0] $end
    $var wire  1 ~ clk $end
    $var wire 32 2 din [31:0] $end
    $var wire 32 5 dout [31:0] $end
    $var wire  1 !! rst $end
    $var wire  1 5! wen $end
   $upscope $end
   $scope module u_pc_D2E $end
    $var wire 32 ;! WIDTH [31:0] $end
    $var wire  1 ~ clk $end
    $var wire 64 ' din [63:0] $end
    $var wire 64 0 dout [63:0] $end
    $var wire  1 !! rst $end
    $var wire  1 5! wen $end
   $upscope $end
   $scope module u_pc_E2M $end
    $var wire 32 ;! WIDTH [31:0] $end
    $var wire  1 ~ clk $end
    $var wire 64 0 din [63:0] $end
    $var wire 64 3 dout [63:0] $end
    $var wire  1 !! rst $end
    $var wire  1 5! wen $end
   $upscope $end
   $scope module u_pc_F2D $end
    $var wire 32 ;! WIDTH [31:0] $end
    $var wire  1 ~ clk $end
    $var wire 64 $ din [63:0] $end
    $var wire 64 ' dout [63:0] $end
    $var wire  1 !! rst $end
    $var wire  1 5! wen $end
   $upscope $end
   $scope module u_pc_M2W $end
    $var wire 32 ;! WIDTH [31:0] $end
    $var wire  1 ~ clk $end
    $var wire 64 3 din [63:0] $end
    $var wire 64 6 dout [63:0] $end
    $var wire  1 !! rst $end
    $var wire  1 5! wen $end
   $upscope $end
   $scope module u_regs $end
    $var wire 64 1! Ra [63:0] $end
    $var wire  5 * Ra_addr [4:0] $end
    $var wire  1 5! Ra_en $end
    $var wire 64 /! Rb [63:0] $end
    $var wire  5 + Rb_addr [4:0] $end
    $var wire  1 5! Rb_en $end
    $var wire 64 8! Rw [63:0] $end
    $var wire  5 , Rw_addr [4:0] $end
    $var wire  1 5! Rw_en $end
    $var wire  1 ~ clk $end
    $var wire 32 # i [31:0] $end
    $var wire 64 > regsheap[0] [63:0] $end
    $var wire 64 R regsheap[10] [63:0] $end
    $var wire 64 T regsheap[11] [63:0] $end
    $var wire 64 V regsheap[12] [63:0] $end
    $var wire 64 X regsheap[13] [63:0] $end
    $var wire 64 Z regsheap[14] [63:0] $end
    $var wire 64 \ regsheap[15] [63:0] $end
    $var wire 64 ^ regsheap[16] [63:0] $end
    $var wire 64 ` regsheap[17] [63:0] $end
    $var wire 64 b regsheap[18] [63:0] $end
    $var wire 64 d regsheap[19] [63:0] $end
    $var wire 64 @ regsheap[1] [63:0] $end
    $var wire 64 f regsheap[20] [63:0] $end
    $var wire 64 h regsheap[21] [63:0] $end
    $var wire 64 j regsheap[22] [63:0] $end
    $var wire 64 l regsheap[23] [63:0] $end
    $var wire 64 n regsheap[24] [63:0] $end
    $var wire 64 p regsheap[25] [63:0] $end
    $var wire 64 r regsheap[26] [63:0] $end
    $var wire 64 t regsheap[27] [63:0] $end
    $var wire 64 v regsheap[28] [63:0] $end
    $var wire 64 x regsheap[29] [63:0] $end
    $var wire 64 B regsheap[2] [63:0] $end
    $var wire 64 z regsheap[30] [63:0] $end
    $var wire 64 | regsheap[31] [63:0] $end
    $var wire 64 D regsheap[3] [63:0] $end
    $var wire 64 F regsheap[4] [63:0] $end
    $var wire 64 H regsheap[5] [63:0] $end
    $var wire 64 J regsheap[6] [63:0] $end
    $var wire 64 L regsheap[7] [63:0] $end
    $var wire 64 N regsheap[8] [63:0] $end
    $var wire 64 P regsheap[9] [63:0] $end
    $var wire  1 !! rst $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000100000 #
b0000000000000000000000000000000000000000000000000000000000000000 $
b00000000000000000000000000000000 &
b0000000000000000000000000000000000000000000000000000000000000000 '
b0000 )
b00000 *
b00000 +
b00000 ,
b0000000000000000000000000000000000000000000000000000000000000000 -
b00000000000000000000000000000000 /
b0000000000000000000000000000000000000000000000000000000000000000 0
b00000000000000000000000000000000 2
b0000000000000000000000000000000000000000000000000000000000000000 3
b00000000000000000000000000000000 5
b0000000000000000000000000000000000000000000000000000000000000000 6
b0000000 8
b000 9
0:
1;
0<
b00000000 =
b0000000000000000000000000000000000000000000000000000000000000000 >
b0000000000000000000000000000000000000000000000000000000000000000 @
b0000000000000000000000000000000000000000000000000000000000000000 B
b0000000000000000000000000000000000000000000000000000000000000000 D
b0000000000000000000000000000000000000000000000000000000000000000 F
b0000000000000000000000000000000000000000000000000000000000000000 H
b0000000000000000000000000000000000000000000000000000000000000000 J
b0000000000000000000000000000000000000000000000000000000000000000 L
b0000000000000000000000000000000000000000000000000000000000000000 N
b0000000000000000000000000000000000000000000000000000000000000000 P
b0000000000000000000000000000000000000000000000000000000000000000 R
b0000000000000000000000000000000000000000000000000000000000000000 T
b0000000000000000000000000000000000000000000000000000000000000000 V
b0000000000000000000000000000000000000000000000000000000000000000 X
b0000000000000000000000000000000000000000000000000000000000000000 Z
b0000000000000000000000000000000000000000000000000000000000000000 \
b0000000000000000000000000000000000000000000000000000000000000000 ^
b0000000000000000000000000000000000000000000000000000000000000000 `
b0000000000000000000000000000000000000000000000000000000000000000 b
b0000000000000000000000000000000000000000000000000000000000000000 d
b0000000000000000000000000000000000000000000000000000000000000000 f
b0000000000000000000000000000000000000000000000000000000000000000 h
b0000000000000000000000000000000000000000000000000000000000000000 j
b0000000000000000000000000000000000000000000000000000000000000000 l
b0000000000000000000000000000000000000000000000000000000000000000 n
b0000000000000000000000000000000000000000000000000000000000000000 p
b0000000000000000000000000000000000000000000000000000000000000000 r
b0000000000000000000000000000000000000000000000000000000000000000 t
b0000000000000000000000000000000000000000000000000000000000000000 v
b0000000000000000000000000000000000000000000000000000000000000000 x
b0000000000000000000000000000000000000000000000000000000000000000 z
b0000000000000000000000000000000000000000000000000000000000000000 |
0~
1!!
b0000000000000000000000000000000000000000000000000000000000000000 "!
1$!
0%!
b0000000000000000000000000000000000000000000000000000000000000000 &!
b0000000000000000000000000000000000000000000000000000000000000000 (!
b0000000000000000000000000000000000000000000000000000000000000000 *!
b0000000000000000000000000000000000000000000000000000000000000000 ,!
b00000000000000000000000000000000 .!
b0000000000000000000000000000000000000000000000000000000000000000 /!
b0000000000000000000000000000000000000000000000000000000000000000 1!
b0000000000000000000000000000000000000000000000000000000000000000 3!
15!
b0000000000000000000000000000000000000000000000000000000000000000 6!
b0000000000000000000000000000000000000000000000000000000000000000 8!
b00000000000000000000000000100000 :!
b00000000000000000000000001000000 ;!
#1
#2
#3
#4
#5
1~
#6
#7
#8
#9
#10
0~
#11
#12
#13
#14
#15
1~
#16
#17
#18
#19
#20
0~
0!!
#21
#22
#23
#24
#25
b0000000000000000000000000000000000000000000000000000000000000001 $
1~
b0000000000000000000000000000000000000000000000000000000000000001 &!
#26
#27
#28
#29
#30
0~
#31
#32
#33
#34
#35
b0000000000000000000000000000000000000000000000000000000000000010 $
b00000000000100000000000010010011 &
b0000000000000000000000000000000000000000000000000000000000000001 '
b00001 +
b00001 ,
b0000000000000000000000000000000000000000000000000000000000000001 -
b00000000000100000000000010010011 /
b0010011 8
1:
1<
b00000001 =
1~
b0000000000000000000000000000000000000000000100000000000010010011 "!
b0000000000000000000000000000000000000000000000000000000000000010 &!
b00000000000100000000000010010011 .!
b0000000000000000000000000000000000000000000000000000000000000001 3!
#36
#37
#38
#39
#40
0~
#41
#42
#43
#44
#45
b0000000000000000000000000000000000000000000000000000000000000011 $
b00000000001000000000000010010011 &
b0000000000000000000000000000000000000000000000000000000000000010 '
b00010 +
b0000000000000000000000000000000000000000000000000000000000000010 -
b00000000001000000000000010010011 /
b0000000000000000000000000000000000000000000000000000000000000001 0
b00000000000100000000000010010011 2
1~
b0000000000000000000000000000000000000000001000000000000010010011 "!
b0000000000000000000000000000000000000000000000000000000000000011 &!
b00000000001000000000000010010011 .!
b0000000000000000000000000000000000000000000000000000000000000010 3!
#46
#47
#48
#49
#50
0~
#51
#52
#53
#54
#55
b0000000000000000000000000000000000000000000000000000000000000100 $
b00000000000100001000000010010011 &
b0000000000000000000000000000000000000000000000000000000000000011 '
b00001 *
b00001 +
b0000000000000000000000000000000000000000000000000000000000000001 -
b00000000000100001000000010010011 /
b0000000000000000000000000000000000000000000000000000000000000010 0
b00000000001000000000000010010011 2
b0000000000000000000000000000000000000000000000000000000000000001 3
b00000000000100000000000010010011 5
1~
b0000000000000000000000000000000000000000000100001000000010010011 "!
b0000000000000000000000000000000000000000000000000000000000000100 &!
b00000000000100001000000010010011 .!
b0000000000000000000000000000000000000000000000000000000000000001 3!
#56
#57
#58
#59
#60
0~
#61
#62
#63
#64
#65
b0000000000000000000000000000000000000000000000000000000000000101 $
b00000000000000000000000000000000 &
b0000000000000000000000000000000000000000000000000000000000000100 '
b00000 *
b00000 +
b00000 ,
b0000000000000000000000000000000000000000000000000000000000000000 -
b00000000000000000000000000000000 /
b0000000000000000000000000000000000000000000000000000000000000011 0
b00000000000100001000000010010011 2
b0000000000000000000000000000000000000000000000000000000000000010 3
b00000000001000000000000010010011 5
b0000000000000000000000000000000000000000000000000000000000000001 6
b0000000 8
0:
0<
b00000000 =
1~
b0000000000000000000000000000000000000000000000000000000000000000 "!
b0000000000000000000000000000000000000000000000000000000000000101 &!
b00000000000000000000000000000000 .!
b0000000000000000000000000000000000000000000000000000000000000000 3!
#66
#67
#68
#69
#70
0~
#71
#72
#73
#74
#75
b0000000000000000000000000000000000000000000000000000000000000110 $
b0000000000000000000000000000000000000000000000000000000000000101 '
b0000000000000000000000000000000000000000000000000000000000000100 0
b00000000000000000000000000000000 2
b0000000000000000000000000000000000000000000000000000000000000011 3
b00000000000100001000000010010011 5
b0000000000000000000000000000000000000000000000000000000000000010 6
1~
b0000000000000000000000000000000000000000000000000000000000000110 &!
#76
#77
#78
#79
#80
0~
#81
#82
#83
#84
#85
b0000000000000000000000000000000000000000000000000000000000000111 $
b0000000000000000000000000000000000000000000000000000000000000110 '
b0000000000000000000000000000000000000000000000000000000000000101 0
b0000000000000000000000000000000000000000000000000000000000000100 3
b00000000000000000000000000000000 5
b0000000000000000000000000000000000000000000000000000000000000011 6
1~
b0000000000000000000000000000000000000000000000000000000000000111 &!
#86
#87
#88
#89
#90
0~
#91
#92
#93
#94
#95
b0000000000000000000000000000000000000000000000000000000000001000 $
b0000000000000000000000000000000000000000000000000000000000000111 '
b0000000000000000000000000000000000000000000000000000000000000110 0
b0000000000000000000000000000000000000000000000000000000000000101 3
b0000000000000000000000000000000000000000000000000000000000000100 6
1~
b0000000000000000000000000000000000000000000000000000000000001000 &!
#96
#97
#98
#99
