$version Generated by VerilatedVcd $end
$date Mon Jun 13 11:52:47 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire 64 w RamReadAddr [63:0] $end
  $var wire 64 s RamReadData [63:0] $end
  $var wire  1 u RamReadEnable $end
  $var wire 64 y RamWriteAddr [63:0] $end
  $var wire 64 } RamWriteData [63:0] $end
  $var wire  1 v RamWriteEnable $end
  $var wire 64 { RamWriteMask [63:0] $end
  $var wire  1 q clk $end
  $var wire  1 r rst $end
  $scope module zerocore $end
   $var wire 64 w RamReadAddr [63:0] $end
   $var wire 64 s RamReadData [63:0] $end
   $var wire  1 u RamReadEnable $end
   $var wire 64 y RamWriteAddr [63:0] $end
   $var wire 64 } RamWriteData [63:0] $end
   $var wire  1 v RamWriteEnable $end
   $var wire 64 { RamWriteMask [63:0] $end
   $var wire  1 3! aluBsrc $end
   $var wire  4 4! aluCtl [3:0] $end
   $var wire  1 q clk $end
   $var wire 64 & imm [63:0] $end
   $var wire 64 "! ina [63:0] $end
   $var wire 64 & inb [63:0] $end
   $var wire 32 % instD [31:0] $end
   $var wire 32 0! instE [31:0] $end
   $var wire 32 !! instF [31:0] $end
   $var wire 32 (! instM [31:0] $end
   $var wire 32 -! instW [31:0] $end
   $var wire 64 +! pcD [63:0] $end
   $var wire 64 1! pcE [63:0] $end
   $var wire 64 # pcF [63:0] $end
   $var wire 64 )! pcM [63:0] $end
   $var wire 64 .! pcW [63:0] $end
   $var wire  5 * rdWriteAddrW [4:0] $end
   $var wire 64 5! rdWriteDataW [63:0] $end
   $var wire  1 3! rdWriteEnableW $end
   $var wire 64 $! res [63:0] $end
   $var wire 64 "! rs1DataD [63:0] $end
   $var wire  5 ( rs1ReadAddr [4:0] $end
   $var wire  1 3! rs1ReadEnable $end
   $var wire 64 &! rs2DataD [63:0] $end
   $var wire  5 ) rs2ReadAddr [4:0] $end
   $var wire  1 3! rs2ReadEnable $end
   $var wire  1 r rst $end
   $scope module u_ex $end
    $var wire  4 4! aluCtl [3:0] $end
    $var wire 64 "! ina [63:0] $end
    $var wire 64 & inb [63:0] $end
    $var wire 64 $! outy [63:0] $end
   $upscope $end
   $scope module u_id $end
    $var wire  1 / ADDI $end
    $var wire  1 3! aluBsrc $end
    $var wire  4 4! aluCtl [3:0] $end
    $var wire  8 0 aluType [7:0] $end
    $var wire  3 , funt3 [2:0] $end
    $var wire  1 . funt3_000 $end
    $var wire 64 & imm [63:0] $end
    $var wire 32 % inst [31:0] $end
    $var wire  7 + opcode [6:0] $end
    $var wire  1 - opcode_001_0011 $end
    $var wire  5 ( ra_addr [4:0] $end
    $var wire  1 3! ra_en $end
    $var wire  5 ) rb_addr [4:0] $end
    $var wire  1 3! rb_en $end
    $var wire  5 * rd_addr [4:0] $end
    $var wire  1 3! rd_en $end
   $upscope $end
   $scope module u_if $end
    $var wire  1 q clk $end
    $var wire 32 % instD [31:0] $end
    $var wire 32 !! instF [31:0] $end
    $var wire 64 # pc [63:0] $end
    $var wire  1 r rst $end
    $scope module u_inst_F2D $end
     $var wire 32 7! WIDTH [31:0] $end
     $var wire  1 q clk $end
     $var wire 32 !! din [31:0] $end
     $var wire 32 % dout [31:0] $end
     $var wire  1 r rst $end
     $var wire  1 3! wen $end
    $upscope $end
   $upscope $end
   $scope module u_regs $end
    $var wire  5 ( ReadAddr1 [4:0] $end
    $var wire  5 ) ReadAddr2 [4:0] $end
    $var wire 64 "! ReadData1 [63:0] $end
    $var wire 64 &! ReadData2 [63:0] $end
    $var wire  1 3! ReadEnable1 $end
    $var wire  1 3! ReadEnable2 $end
    $var wire  5 * WriteAddr [4:0] $end
    $var wire 64 5! WriteData [63:0] $end
    $var wire  1 3! WriteEnable $end
    $var wire  1 q clk $end
    $var wire 64 1 regs[0] [63:0] $end
    $var wire 64 E regs[10] [63:0] $end
    $var wire 64 G regs[11] [63:0] $end
    $var wire 64 I regs[12] [63:0] $end
    $var wire 64 K regs[13] [63:0] $end
    $var wire 64 M regs[14] [63:0] $end
    $var wire 64 O regs[15] [63:0] $end
    $var wire 64 Q regs[16] [63:0] $end
    $var wire 64 S regs[17] [63:0] $end
    $var wire 64 U regs[18] [63:0] $end
    $var wire 64 W regs[19] [63:0] $end
    $var wire 64 3 regs[1] [63:0] $end
    $var wire 64 Y regs[20] [63:0] $end
    $var wire 64 [ regs[21] [63:0] $end
    $var wire 64 ] regs[22] [63:0] $end
    $var wire 64 _ regs[23] [63:0] $end
    $var wire 64 a regs[24] [63:0] $end
    $var wire 64 c regs[25] [63:0] $end
    $var wire 64 e regs[26] [63:0] $end
    $var wire 64 g regs[27] [63:0] $end
    $var wire 64 i regs[28] [63:0] $end
    $var wire 64 k regs[29] [63:0] $end
    $var wire 64 5 regs[2] [63:0] $end
    $var wire 64 m regs[30] [63:0] $end
    $var wire 64 o regs[31] [63:0] $end
    $var wire 64 7 regs[3] [63:0] $end
    $var wire 64 9 regs[4] [63:0] $end
    $var wire 64 ; regs[5] [63:0] $end
    $var wire 64 = regs[6] [63:0] $end
    $var wire 64 ? regs[7] [63:0] $end
    $var wire 64 A regs[8] [63:0] $end
    $var wire 64 C regs[9] [63:0] $end
    $var wire  1 r rst $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000000000000000000000000000000000000000000000000000000000000000 #
b00000000000000000000000000000000 %
b0000000000000000000000000000000000000000000000000000000000000000 &
b00000 (
b00000 )
b00000 *
b0000000 +
b000 ,
0-
1.
0/
b00000000 0
b0000000000000000000000000000000000000000000000000000000000000000 1
b0000000000000000000000000000000000000000000000000000000000000000 3
b0000000000000000000000000000000000000000000000000000000000000000 5
b0000000000000000000000000000000000000000000000000000000000000000 7
b0000000000000000000000000000000000000000000000000000000000000000 9
b0000000000000000000000000000000000000000000000000000000000000000 ;
b0000000000000000000000000000000000000000000000000000000000000000 =
b0000000000000000000000000000000000000000000000000000000000000000 ?
b0000000000000000000000000000000000000000000000000000000000000000 A
b0000000000000000000000000000000000000000000000000000000000000000 C
b0000000000000000000000000000000000000000000000000000000000000000 E
b0000000000000000000000000000000000000000000000000000000000000000 G
b0000000000000000000000000000000000000000000000000000000000000000 I
b0000000000000000000000000000000000000000000000000000000000000000 K
b0000000000000000000000000000000000000000000000000000000000000000 M
b0000000000000000000000000000000000000000000000000000000000000000 O
b0000000000000000000000000000000000000000000000000000000000000000 Q
b0000000000000000000000000000000000000000000000000000000000000000 S
b0000000000000000000000000000000000000000000000000000000000000000 U
b0000000000000000000000000000000000000000000000000000000000000000 W
b0000000000000000000000000000000000000000000000000000000000000000 Y
b0000000000000000000000000000000000000000000000000000000000000000 [
b0000000000000000000000000000000000000000000000000000000000000000 ]
b0000000000000000000000000000000000000000000000000000000000000000 _
b0000000000000000000000000000000000000000000000000000000000000000 a
b0000000000000000000000000000000000000000000000000000000000000000 c
b0000000000000000000000000000000000000000000000000000000000000000 e
b0000000000000000000000000000000000000000000000000000000000000000 g
b0000000000000000000000000000000000000000000000000000000000000000 i
b0000000000000000000000000000000000000000000000000000000000000000 k
b0000000000000000000000000000000000000000000000000000000000000000 m
b0000000000000000000000000000000000000000000000000000000000000000 o
0q
1r
b0000000000000000000000000000000000000000000000000000000000000000 s
1u
0v
b0000000000000000000000000000000000000000000000000000000000000000 w
b0000000000000000000000000000000000000000000000000000000000000000 y
b0000000000000000000000000000000000000000000000000000000000000000 {
b0000000000000000000000000000000000000000000000000000000000000000 }
b00000000000000000000000000000000 !!
b0000000000000000000000000000000000000000000000000000000000000000 "!
b0000000000000000000000000000000000000000000000000000000000000000 $!
b0000000000000000000000000000000000000000000000000000000000000000 &!
b00000000000000000000000000000000 (!
b0000000000000000000000000000000000000000000000000000000000000000 )!
b0000000000000000000000000000000000000000000000000000000000000000 +!
b00000000000000000000000000000000 -!
b0000000000000000000000000000000000000000000000000000000000000000 .!
b00000000000000000000000000000000 0!
b0000000000000000000000000000000000000000000000000000000000000000 1!
13!
b0000 4!
b0000000000000000000000000000000000000000000000000000000000000000 5!
b00000000000000000000000000100000 7!
#1
#2
#3
#4
#5
1q
#6
#7
#8
#9
#10
0q
#11
#12
#13
#14
#15
1q
#16
#17
#18
#19
#20
0q
0r
#21
#22
#23
#24
#25
b0000000000000000000000000000000000000000000000000000000000000001 #
1q
b0000000000000000000000000000000000000000000000000000000000000001 w
#26
#27
#28
#29
#30
0q
#31
#32
#33
#34
#35
b0000000000000000000000000000000000000000000000000000000000000010 #
b00000000000100000000000010010011 %
b0000000000000000000000000000000000000000000000000000000000000001 &
b00001 )
b00001 *
b0010011 +
1-
1/
b00000001 0
1q
b0000000000000000000000000000000000000000000100000000000010010011 s
b0000000000000000000000000000000000000000000000000000000000000010 w
b00000000000100000000000010010011 !!
b0000000000000000000000000000000000000000000000000000000000000001 $!
#36
#37
#38
#39
#40
0q
#41
#42
#43
#44
#45
b0000000000000000000000000000000000000000000000000000000000000011 #
b00000000001000000000000010010011 %
b0000000000000000000000000000000000000000000000000000000000000010 &
b00010 )
1q
b0000000000000000000000000000000000000000001000000000000010010011 s
b0000000000000000000000000000000000000000000000000000000000000011 w
b00000000001000000000000010010011 !!
b0000000000000000000000000000000000000000000000000000000000000010 $!
#46
#47
#48
#49
#50
0q
#51
#52
#53
#54
#55
b0000000000000000000000000000000000000000000000000000000000000100 #
b00000000000100001000000010010011 %
b0000000000000000000000000000000000000000000000000000000000000001 &
b00001 (
b00001 )
1q
b0000000000000000000000000000000000000000000100001000000010010011 s
b0000000000000000000000000000000000000000000000000000000000000100 w
b00000000000100001000000010010011 !!
b0000000000000000000000000000000000000000000000000000000000000001 $!
#56
#57
#58
#59
#60
0q
#61
#62
#63
#64
#65
b0000000000000000000000000000000000000000000000000000000000000101 #
b00000000000000000000000000000000 %
b0000000000000000000000000000000000000000000000000000000000000000 &
b00000 (
b00000 )
b00000 *
b0000000 +
0-
0/
b00000000 0
1q
b0000000000000000000000000000000000000000000000000000000000000000 s
b0000000000000000000000000000000000000000000000000000000000000101 w
b00000000000000000000000000000000 !!
b0000000000000000000000000000000000000000000000000000000000000000 $!
#66
#67
#68
#69
#70
0q
#71
#72
#73
#74
#75
b0000000000000000000000000000000000000000000000000000000000000110 #
1q
b0000000000000000000000000000000000000000000000000000000000000110 w
#76
#77
#78
#79
#80
0q
#81
#82
#83
#84
#85
b0000000000000000000000000000000000000000000000000000000000000111 #
1q
b0000000000000000000000000000000000000000000000000000000000000111 w
#86
#87
#88
#89
#90
0q
#91
#92
#93
#94
#95
b0000000000000000000000000000000000000000000000000000000000001000 #
1q
b0000000000000000000000000000000000000000000000000000000000001000 w
#96
#97
#98
#99
