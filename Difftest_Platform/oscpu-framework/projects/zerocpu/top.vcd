$version Generated by VerilatedVcd $end
$date Tue Jun 14 12:35:04 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire 64 z RamReadAddr [63:0] $end
  $var wire 64 w RamReadData [63:0] $end
  $var wire  1 y RamReadEnable $end
  $var wire  1 u clk $end
  $var wire  1 v rst $end
  $scope module zerocore $end
   $var wire 64 z RamReadAddr [63:0] $end
   $var wire 64 w RamReadData [63:0] $end
   $var wire  1 y RamReadEnable $end
   $var wire  2 , Redirect1 [1:0] $end
   $var wire  2 - Redirect2 [1:0] $end
   $var wire  1 !! aluBsrc $end
   $var wire  4 A! aluCtl [3:0] $end
   $var wire  1 u clk $end
   $var wire 64 "! imm [63:0] $end
   $var wire 64 % ina [63:0] $end
   $var wire 64 } inb [63:0] $end
   $var wire 32 | instD [31:0] $end
   $var wire 32 >! instE [31:0] $end
   $var wire 32 | instF [31:0] $end
   $var wire 32 6! instM [31:0] $end
   $var wire 32 ;! instW [31:0] $end
   $var wire 64 9! pcD [63:0] $end
   $var wire 64 ?! pcE [63:0] $end
   $var wire 64 # pcF [63:0] $end
   $var wire 64 7! pcM [63:0] $end
   $var wire 64 <! pcW [63:0] $end
   $var wire  5 )! rdWriteAddrE [4:0] $end
   $var wire  5 ) rdWriteAddrM [4:0] $end
   $var wire  5 + rdWriteAddrW [4:0] $end
   $var wire 64 r rdWriteDataW [63:0] $end
   $var wire  1 (! rdWriteEnableE $end
   $var wire  1 *! rdWriteEnableM $end
   $var wire  1 * rdWriteEnableW $end
   $var wire 64 $! rs1DataD [63:0] $end
   $var wire 64 % rs1DataE [63:0] $end
   $var wire  5 p rs1ReadAddr [4:0] $end
   $var wire  1 n rs1ReadEnable $end
   $var wire 64 &! rs2DataD [63:0] $end
   $var wire 64 ' rs2DataE [63:0] $end
   $var wire  5 q rs2ReadAddr [4:0] $end
   $var wire  1 o rs2ReadEnable $end
   $var wire  1 v rst $end
   $scope module rs1Data_D2E $end
    $var wire 32 B! WIDTH [31:0] $end
    $var wire  1 u clk $end
    $var wire 64 $! din [63:0] $end
    $var wire 64 % dout [63:0] $end
    $var wire 64 % dout_r [63:0] $end
    $var wire  1 v rst $end
   $upscope $end
   $scope module rs2Data_D2E $end
    $var wire 32 B! WIDTH [31:0] $end
    $var wire  1 u clk $end
    $var wire 64 &! din [63:0] $end
    $var wire 64 ' dout [63:0] $end
    $var wire 64 ' dout_r [63:0] $end
    $var wire  1 v rst $end
   $upscope $end
   $scope module u_ctrl $end
    $var wire  2 , Redirect1 [1:0] $end
    $var wire  2 t Redirect1_r [1:0] $end
    $var wire  2 - Redirect2 [1:0] $end
    $var wire  2 +! Redirect2_r [1:0] $end
    $var wire  1 u clk $end
    $var wire  5 )! rdWriteAddrE [4:0] $end
    $var wire  5 ) rdWriteAddrM [4:0] $end
    $var wire  5 p rs1ReadAddr [4:0] $end
    $var wire  1 n rs1ReadEnable $end
    $var wire  5 q rs2ReadAddr [4:0] $end
    $var wire  1 o rs2ReadEnable $end
    $var wire  1 v rst $end
    $scope module Redirect1_dff $end
     $var wire 32 C! WIDTH [31:0] $end
     $var wire  1 u clk $end
     $var wire  2 t din [1:0] $end
     $var wire  2 , dout [1:0] $end
     $var wire  2 , dout_r [1:0] $end
     $var wire  1 v rst $end
    $upscope $end
    $scope module Redirect2_dff $end
     $var wire 32 C! WIDTH [31:0] $end
     $var wire  1 u clk $end
     $var wire  2 +! din [1:0] $end
     $var wire  2 - dout [1:0] $end
     $var wire  2 - dout_r [1:0] $end
     $var wire  1 v rst $end
    $upscope $end
   $upscope $end
   $scope module u_ex $end
    $var wire  4 A! aluCtl [3:0] $end
    $var wire  1 u clk $end
    $var wire 64 % ina [63:0] $end
    $var wire 64 } inb [63:0] $end
    $var wire 64 r outy [63:0] $end
    $var wire  5 )! rdWriteAddrE [4:0] $end
    $var wire  5 )! rdWriteAddrE_r [4:0] $end
    $var wire  5 ) rdWriteAddrM [4:0] $end
    $var wire  1 (! rdWriteEnableE $end
    $var wire  1 (! rdWriteEnableE_r $end
    $var wire  1 *! rdWriteEnableM $end
    $var wire 64 r resADD [63:0] $end
    $var wire  1 v rst $end
    $scope module rdWriteAddr_E2M $end
     $var wire 32 D! WIDTH [31:0] $end
     $var wire  1 u clk $end
     $var wire  5 )! din [4:0] $end
     $var wire  5 ) dout [4:0] $end
     $var wire  5 ) dout_r [4:0] $end
     $var wire  1 v rst $end
    $upscope $end
   $upscope $end
   $scope module u_id $end
    $var wire  1 4! ADD $end
    $var wire  1 !! ADDI $end
    $var wire  1 0! Itype $end
    $var wire  1 o Rtype $end
    $var wire  1 !! aluBsrc $end
    $var wire  4 A! aluCtl [3:0] $end
    $var wire  8 5! aluType [7:0] $end
    $var wire  1 u clk $end
    $var wire  3 /! funt3 [2:0] $end
    $var wire  1 3! funt3_000 $end
    $var wire 64 "! imm [63:0] $end
    $var wire 32 | instD [31:0] $end
    $var wire  7 .! opcode [6:0] $end
    $var wire  1 0! opcode_001_0011 $end
    $var wire  1 1! opcode_011_0011 $end
    $var wire  1 2! opcode_011_1011 $end
    $var wire  5 )! rdWriteAddrE [4:0] $end
    $var wire  1 (! rdWriteEnableE $end
    $var wire  5 ,! rs1 [4:0] $end
    $var wire  5 p rs1ReadAddr [4:0] $end
    $var wire  1 n rs1ReadEnable $end
    $var wire  5 -! rs2 [4:0] $end
    $var wire  5 q rs2ReadAddr [4:0] $end
    $var wire  1 o rs2ReadEnable $end
   $upscope $end
   $scope module u_if $end
    $var wire  1 u clk $end
    $var wire 32 | instD [31:0] $end
    $var wire 32 | instF [31:0] $end
    $var wire 64 # pc [63:0] $end
    $var wire  1 v rst $end
   $upscope $end
   $scope module u_mem $end
    $var wire  1 u clk $end
    $var wire  5 ) rdWriteAddrM [4:0] $end
    $var wire  5 + rdWriteAddrW [4:0] $end
    $var wire  1 *! rdWriteEnableM $end
    $var wire  1 * rdWriteEnableW $end
    $var wire  1 v rst $end
    $scope module rdWriteAddr_M2W $end
     $var wire 32 D! WIDTH [31:0] $end
     $var wire  1 u clk $end
     $var wire  5 ) din [4:0] $end
     $var wire  5 + dout [4:0] $end
     $var wire  5 + dout_r [4:0] $end
     $var wire  1 v rst $end
    $upscope $end
    $scope module rdWriteEnable_M2W $end
     $var wire 32 E! WIDTH [31:0] $end
     $var wire  1 u clk $end
     $var wire  1 *! din [0:0] $end
     $var wire  1 * dout [0:0] $end
     $var wire  1 * dout_r [0:0] $end
     $var wire  1 v rst $end
    $upscope $end
   $upscope $end
   $scope module u_regs $end
    $var wire  5 p ReadAddr1 [4:0] $end
    $var wire  5 q ReadAddr2 [4:0] $end
    $var wire 64 $! ReadData1 [63:0] $end
    $var wire 64 &! ReadData2 [63:0] $end
    $var wire  1 n ReadEnable1 $end
    $var wire  1 o ReadEnable2 $end
    $var wire  5 + WriteAddr [4:0] $end
    $var wire 64 r WriteData [63:0] $end
    $var wire  1 * WriteEnable $end
    $var wire  1 u clk $end
    $var wire 64 . regs[0] [63:0] $end
    $var wire 64 B regs[10] [63:0] $end
    $var wire 64 D regs[11] [63:0] $end
    $var wire 64 F regs[12] [63:0] $end
    $var wire 64 H regs[13] [63:0] $end
    $var wire 64 J regs[14] [63:0] $end
    $var wire 64 L regs[15] [63:0] $end
    $var wire 64 N regs[16] [63:0] $end
    $var wire 64 P regs[17] [63:0] $end
    $var wire 64 R regs[18] [63:0] $end
    $var wire 64 T regs[19] [63:0] $end
    $var wire 64 0 regs[1] [63:0] $end
    $var wire 64 V regs[20] [63:0] $end
    $var wire 64 X regs[21] [63:0] $end
    $var wire 64 Z regs[22] [63:0] $end
    $var wire 64 \ regs[23] [63:0] $end
    $var wire 64 ^ regs[24] [63:0] $end
    $var wire 64 ` regs[25] [63:0] $end
    $var wire 64 b regs[26] [63:0] $end
    $var wire 64 d regs[27] [63:0] $end
    $var wire 64 f regs[28] [63:0] $end
    $var wire 64 h regs[29] [63:0] $end
    $var wire 64 2 regs[2] [63:0] $end
    $var wire 64 j regs[30] [63:0] $end
    $var wire 64 l regs[31] [63:0] $end
    $var wire 64 4 regs[3] [63:0] $end
    $var wire 64 6 regs[4] [63:0] $end
    $var wire 64 8 regs[5] [63:0] $end
    $var wire 64 : regs[6] [63:0] $end
    $var wire 64 < regs[7] [63:0] $end
    $var wire 64 > regs[8] [63:0] $end
    $var wire 64 @ regs[9] [63:0] $end
    $var wire  1 v rst $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000000000000000000000000000000000000000000000000000000000000000 #
b0000000000000000000000000000000000000000000000000000000000000000 %
b0000000000000000000000000000000000000000000000000000000000000000 '
b00000 )
0*
b00000 +
b00 ,
b00 -
b0000000000000000000000000000000000000000000000000000000000000000 .
b0000000000000000000000000000000000000000000000000000000000000000 0
b0000000000000000000000000000000000000000000000000000000000000000 2
b0000000000000000000000000000000000000000000000000000000000000000 4
b0000000000000000000000000000000000000000000000000000000000000000 6
b0000000000000000000000000000000000000000000000000000000000000000 8
b0000000000000000000000000000000000000000000000000000000000000000 :
b0000000000000000000000000000000000000000000000000000000000000000 <
b0000000000000000000000000000000000000000000000000000000000000000 >
b0000000000000000000000000000000000000000000000000000000000000000 @
b0000000000000000000000000000000000000000000000000000000000000000 B
b0000000000000000000000000000000000000000000000000000000000000000 D
b0000000000000000000000000000000000000000000000000000000000000000 F
b0000000000000000000000000000000000000000000000000000000000000000 H
b0000000000000000000000000000000000000000000000000000000000000000 J
b0000000000000000000000000000000000000000000000000000000000000000 L
b0000000000000000000000000000000000000000000000000000000000000000 N
b0000000000000000000000000000000000000000000000000000000000000000 P
b0000000000000000000000000000000000000000000000000000000000000000 R
b0000000000000000000000000000000000000000000000000000000000000000 T
b0000000000000000000000000000000000000000000000000000000000000000 V
b0000000000000000000000000000000000000000000000000000000000000000 X
b0000000000000000000000000000000000000000000000000000000000000000 Z
b0000000000000000000000000000000000000000000000000000000000000000 \
b0000000000000000000000000000000000000000000000000000000000000000 ^
b0000000000000000000000000000000000000000000000000000000000000000 `
b0000000000000000000000000000000000000000000000000000000000000000 b
b0000000000000000000000000000000000000000000000000000000000000000 d
b0000000000000000000000000000000000000000000000000000000000000000 f
b0000000000000000000000000000000000000000000000000000000000000000 h
b0000000000000000000000000000000000000000000000000000000000000000 j
b0000000000000000000000000000000000000000000000000000000000000000 l
0n
0o
b00000 p
b00000 q
b0000000000000000000000000000000000000000000000000000000000000000 r
b00 t
0u
1v
b0000000000000000000000000000000000000000000000000000000000000000 w
1y
b0000000000000000000000000000000000000000000000000000000000000000 z
b00000000000000000000000000000000 |
b0000000000000000000000000000000000000000000000000000000000000000 }
0!!
b0000000000000000000000000000000000000000000000000000000000000000 "!
b0000000000000000000000000000000000000000000000000000000000000000 $!
b0000000000000000000000000000000000000000000000000000000000000000 &!
0(!
b00000 )!
0*!
b00 +!
b00000 ,!
b00000 -!
b0000000 .!
b000 /!
00!
01!
02!
13!
04!
b00000000 5!
b00000000000000000000000000000000 6!
b0000000000000000000000000000000000000000000000000000000000000000 7!
b0000000000000000000000000000000000000000000000000000000000000000 9!
b00000000000000000000000000000000 ;!
b0000000000000000000000000000000000000000000000000000000000000000 <!
b00000000000000000000000000000000 >!
b0000000000000000000000000000000000000000000000000000000000000000 ?!
b0000 A!
b00000000000000000000000001000000 B!
b00000000000000000000000000000010 C!
b00000000000000000000000000000101 D!
b00000000000000000000000000000001 E!
#1
#2
#3
#4
#5
1u
#6
#7
#8
#9
#10
0u
#11
#12
#13
#14
#15
1u
#16
#17
#18
#19
#20
0u
0v
#21
#22
#23
#24
#25
b0000000000000000000000000000000000000000000000000000000000000001 #
1u
b0000000000000000000000000000000000000000000000000000000000000001 z
#26
#27
#28
#29
#30
0u
#31
#32
#33
#34
#35
b0000000000000000000000000000000000000000000000000000000000000010 #
b00001 )
1n
b0000000000000000000000000000000000000000000000000000000000000001 r
1u
b0000000000000000000000000000000000000000000100000000000010010011 w
b0000000000000000000000000000000000000000000000000000000000000010 z
b00000000000100000000000010010011 |
b0000000000000000000000000000000000000000000000000000000000000001 }
1!!
b0000000000000000000000000000000000000000000000000000000000000001 "!
b0000000000000000000000000000000000000000000000000000000000000001 $!
1(!
b00001 )!
b00001 -!
b0010011 .!
10!
b00000001 5!
#36
#37
#38
#39
#40
0u
1*!
#41
#42
#43
#44
#45
b0000000000000000000000000000000000000000000000000000000000000011 #
b0000000000000000000000000000000000000000000000000000000000000001 %
1*
b00001 +
b0000000000000000000000000000000000000000000000000000000000000011 r
1u
b0000000000000000000000000000000000000000001000000000000010010011 w
b0000000000000000000000000000000000000000000000000000000000000011 z
b00000000001000000000000010010011 |
b0000000000000000000000000000000000000000000000000000000000000010 }
b0000000000000000000000000000000000000000000000000000000000000010 "!
b0000000000000000000000000000000000000000000000000000000000000000 $!
b00010 -!
#46
#47
#48
#49
#50
0u
#51
#52
#53
#54
#55
b0000000000000000000000000000000000000000000000000000000000000100 #
b0000000000000000000000000000000000000000000000000000000000000000 %
b0000000000000000000000000000000000000000000000000000000000000011 0
b00001 p
b0000000000000000000000000000000000000000000000000000000000000001 r
b01 t
1u
b0000000000000000000000000000000000000000000100001000000010010011 w
b0000000000000000000000000000000000000000000000000000000000000100 z
b00000000000100001000000010010011 |
b0000000000000000000000000000000000000000000000000000000000000001 }
b0000000000000000000000000000000000000000000000000000000000000001 "!
b0000000000000000000000000000000000000000000000000000000000000001 $!
b00001 ,!
b00001 -!
#56
#57
#58
#59
#60
0u
#61
#62
#63
#64
#65
b0000000000000000000000000000000000000000000000000000000000000101 #
b0000000000000000000000000000000000000000000000000000000000000001 %
b00000 )
b01 ,
b0000000000000000000000000000000000000000000000000000000000000001 0
0n
b00000 p
b00 t
1u
b0000000000000000000000000000000000000000000000000000000000000000 w
b0000000000000000000000000000000000000000000000000000000000000101 z
b00000000000000000000000000000000 |
b0000000000000000000000000000000000000000000000000000000000000000 }
0!!
b0000000000000000000000000000000000000000000000000000000000000000 "!
b0000000000000000000000000000000000000000000000000000000000000000 $!
0(!
b00000 )!
b00000 ,!
b00000 -!
b0000000 .!
00!
b00000000 5!
#66
#67
#68
#69
#70
0u
0*!
#71
#72
#73
#74
#75
b0000000000000000000000000000000000000000000000000000000000000110 #
b0000000000000000000000000000000000000000000000000000000000000000 %
0*
b00000 +
b00 ,
b0000000000000000000000000000000000000000000000000000000000000000 r
1u
b0000000000000000000000000000000000000000000000000000000000000110 z
#76
#77
#78
#79
#80
0u
#81
#82
#83
#84
#85
b0000000000000000000000000000000000000000000000000000000000000111 #
1u
b0000000000000000000000000000000000000000000000000000000000000111 z
#86
#87
#88
#89
#90
0u
#91
#92
#93
#94
#95
b0000000000000000000000000000000000000000000000000000000000001000 #
1u
b0000000000000000000000000000000000000000000000000000000000001000 z
#96
#97
#98
#99
